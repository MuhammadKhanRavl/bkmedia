Vagrant.configure("2") do |config|
  config.vm.box = "bento/ubuntu-23.04-arm64" 


  # Defining clients
  config.vm.define "client1" do |server|
      server.vm.hostname = "client1"
      server.vm.network "private_network", ip: "172.16.82.148"
      server.vm.network "forwarded_port", guest: 22, host: 2200, id: "ssh"

      # Creating backup directory 
      server.vm.provision "shell", inline: <<-SHELL
        mkdir -p /home/vagrant/backups
        chown vagrant:vagrant /home/vagrant/backups
        chmod 755 /home/vagrant/backups

        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/authorized_keys
      SHELL
  end

  config.vm.define "client2" do |server|
      server.vm.hostname = "client2"
      server.vm.network "private_network", ip: "172.16.82.149"
      server.vm.network "forwarded_port", guest: 22, host: 2233, id: "ssh"

      # Creating backup directory 
      server.vm.provision "shell", inline: <<-SHELL
        mkdir -p /home/vagrant/backups
        chown vagrant:vagrant /home/vagrant/backups
        chmod 755 /home/vagrant/backups

        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/authorized_keys
      SHELL

  end


  # Defining main media backup server
  config.vm.define "server" do |server|
    server.vm.hostname = "server"
    server.vm.network "private_network", ip: "172.16.82.147"
    server.vm.network "forwarded_port", guest: 22, host: 2222, id: "ssh"

    # Provisioning a backup folder
    server.vm.provision "shell", inline: <<-SHELL

        # Create backup folder to house backups
        mkdir -p /home/vagrant/backups
        chown vagrant:vagrant /home/vagrant/backups
        chmod 755 /home/vagrant/backups

        # Create config directory to hold all config files
        mkdir -p /home/vagrant/configs
        chown vagrant:vagrant /home/vagrant/configs
        chmod 755 /home/vagrant/configs

        # Create locations.cfg and adding clients 
        # touch /home/vagrant/configs/locations.cfg
        # echo "vagrant@172.16.82.148:2200:/home/vagrant/backups" >> /home/vagrant/configs/locations.cfg
        # echo "vagrant@172.16.82.149:2233:/home/vagrant/backups" >> /home/vagrant/configs/locations.cfg
        # chown vagrant:vagrant /home/vagrant/configs/locations.cfg

        # Create locations.cfg and adding clients 
        touch /home/vagrant/configs/locations.cfg
        chown vagrant:vagrant /home/vagrant/configs/locations.cfg

        # Check and add client info if they don't exist
        LOC1="vagrant@172.16.82.148:2200:/home/vagrant/backups"
        LOC2="vagrant@172.16.82.149:2233:/home/vagrant/backups"
        
        grep -qF "$LOC1" /home/vagrant/configs/locations.cfg || echo "$LOC1" >> /home/vagrant/configs/locations.cfg
        grep -qF "$LOC2" /home/vagrant/configs/locations.cfg || echo "$LOC2" >> /home/vagrant/configs/locations.cfg


        # Create backup logs file
        touch /home/vagrant/configs/logs.cfg
        chown vagrant:vagrant /home/vagrant/configs/logs.cfg

        # Create compression logs file
        touch /home/vagrant/configs/compressions.cfg
        chown vagrant:vagrant /home/vagrant/configs/compressions.cfg

    SHELL

    # Provisioning SSH key pairs for clients
    #server.vm.provision "shell", inline: <<-SHELL

      # Install sshpass
      #sudo apt-get update
      # sudo apt-get install -y sshpass

      # Generate the SSH key pair
      # [ ! -f /home/vagrant/.ssh/id_rsa ] && ssh-keygen -t rsa -f /home/vagrant/.ssh/id_rsa -N ''

      # Copy the public key to client1 and client2 (might need to adjust the IPs or hostnames)
      # sshpass -p 'vagrant' ssh-copy-id -o StrictHostKeyChecking=no -i /home/vagrant/.ssh/id_rsa.pub vagrant@172.16.82.148
      # sshpass -p 'vagrant' ssh-copy-id -o StrictHostKeyChecking=no -i /home/vagrant/.ssh/id_rsa.pub vagrant@172.16.82.149
    
      # Note: default password for VMs is "vagrant". 

    #SHELL

  end


end
